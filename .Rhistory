install.packages("KernSmooth")
help KernSmooth
help(KernSmooth)
?KernSmooth
library(KernSmooth)
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?':'
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"holaiadeu")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(C(y,z),100)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData)<-cnames
myData
quit
quit()
source(cachematrix.R)
setwd("H:/Cursos/ELearning/Coursera/R Programming/Assignment 2/ProgrammingAssignment2")
source(cachematrix.R)
source("cachematrix.R")
m = matrix(3,3)
m
m <- matrix(3,3,3)
m
solve(matrix)
m <- matrix(1:9,3,3)
solve(matrix)
m
identity
identity(3)
solve(diagonal(3))
solve(diag(3))
m <- diag(3)
solve(m)
cacheSolve(m)
m <- makeCacheMatrix(diag(3))
cacheSolve(m)
source('H:/Cursos/ELearning/Coursera/R Programming/Assignment 2/ProgrammingAssignment2/cachematrix.R')
v <- makeVector(rnorm(10))
cachemean(v)
v
v$set
v$get
v$getmean
v$setmean
source('~/.active-rstudio-document')
m <- makeCacheMatrix(diag(3))
cacheSolve(m)
m <- makeCacheMatrix(diag(rnorm(3)))
m
cacheSolve(m)
m$get
mAux <- matrix(rnorm(9),3,3)
mAux
m <- makeCacheMatrix(mAux)
cacheSolve(m)
cacheSolve(m) %*% mAux
